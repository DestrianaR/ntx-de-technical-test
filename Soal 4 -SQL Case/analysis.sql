-- Note: From https://support.google.com/analytics/answer/3437719?hl=en Please note that the `transactionRevenue` column is no longer used, `totalTransactionRevenue` is used instead 
-- and the `totalTransactionRevenue` column will be divided by 1000000 to show the actual figure.

-- Test Case 1: Channel Analysis
-- Craft an SQL query to ascertain the total revenue generated from each channel grouping for the top 5 countries producing the highest revenue.
-- CTE for top 5 countries producing the highest revenue
WITH top_country AS (
  SELECT 
      country,
      SUM(totalTransactionRevenue/1000000) AS revenue
  FROM `ntx-technical-test.ecommers.visitors`
  GROUP BY country
  ORDER BY revenue DESC
  LIMIT 5)

-- Count total revenue per channel for top 5 countries
SELECT 
    tc.country,
    v.channelGrouping AS channel_grouping,
    SUM(v.totalTransactionRevenue/1000000) AS revenue
FROM top_country tc
INNER JOIN `ntx-technical-test.ecommers.visitors` v ON tc.country = v.country
GROUP BY tc.country, channel_grouping
ORDER BY revenue DESC;
-- US generates the largest overall revenue across channel groupings
-- Referral channels generate the highest revenue, even exceeding Organic Search and Direct.
-- This shows that external promotions (such as affiliates, recommendations from other websites) are very effective in bringing in transactions.


-- Test Case 2: User Behavior Analysis
-- Derive insights into user behavior. Calculate metrics like average `timeOnSite`, average `pageviews`, and average `sessionQualityDim` for each `fullVisitorId`. 
-- Identify users who spend above-average time on the site but view fewer pages than the average user.
-- CTE to create user behavior matrix
WITH behaviorMetrics AS (
  SELECT
      fullVisitorId AS visitor_id,
      AVG(timeOnSiite) AS avg_time_on_site,
      AVG(pageviews) AS avg_page_views,
      AVG(sessionQualityDim) AS avg_session_quality_dim
  FROM `ntx-technical-test.ecommers.visitors`
  GROUP BY visitor_id),

-- CTE to calculate average visit time and number of pages viewed by users
avgPerUser AS (
  SELECT
      AVG(avg_time_on_site) AS avg_time_on_site_per_visitor,
      AVG(avg_page_views) AS avg_page_views_per_visitor
  FROM behaviorMetrics)

-- Identify users who spend above average time on the site but view fewer pages than the average user.
SELECT
    bm.visitor_id,
    bm.avg_time_on_site,
    bm.avg_page_views,
    bm.avg_session_quality_dim
FROM behaviorMetrics bm
CROSS JOIN avgPerUser apu
WHERE bm.avg_time_on_site > apu.avg_time_on_site_per_visitor
AND bm.avg_page_views < apu.avg_page_views_per_visitor
ORDER BY bm.avg_session_quality_dim DESC;
-- There are 562 users who spend above-average time on the site but view fewer pages than the average user. 
-- However, only two users have non-null values in the avgSessionQualityDim column, indicating that only these two users had high session quality (i.e., were very close to making a transaction). 
-- Therefore, the longer avgTimeOnSite does not have a significant impact on the likelihood of a user completing a transaction.

-- Test Case 3: Product Performance
-- Computes the total revenue generated by each product (`v2ProductName`)
-- Determines the total quantity sold for each product
-- Calculates the total refund amount for each product
SELECT 
    v2ProductName AS product_name,
    SUM(totalTransactionRevenue / 1000000) AS total_revenue,
    SUM(productQuantity) AS total_quantity,
    SUM(COALESCE(CAST(productRefundAmount AS INT64), 0)) AS total_refund_amount,
    SUM((totalTransactionRevenue / 1000000)- COALESCE(CAST(productRefundAmount AS INT64), 0)) AS net_revenue,
    CASE
		  WHEN SUM(COALESCE(CAST(productRefundAmount AS INT64), 0)) > (0.1 * SUM(totalTransactionRevenue/ 1000000)) 
      THEN 'Flagged'
		ELSE 'Not Flagged'
	END AS refund_flag
FROM `ntx-technical-test.ecommers.visitors`
GROUP BY product_name
ORDER BY net_revenue DESC;
-- `totalTransactionRevenue` used as `total_revenue` is the profit per transaction and not the profit per product so it does not need to be multiplied by the product quantity.
-- It is noted that the `product Refund Amount` column has no value.
-- Some products have `total_revenue` data but no `total_quantity` data. This may occur because the product quantity data was not sent or an error occurred during tracking.